{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "83401930",
   "metadata": {},
   "source": [
    "# Titanic Classification :\n",
    "Build a predictive model to determine the\n",
    "likelihood of survival for passengers on\n",
    "the Titanic using data science techniques\n",
    "in Python.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4335fb3b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd86604c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://www.kaggle.com/c/titanic/data?select=test.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cf2b22e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51f38c51",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b6ee644",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 12)\n",
      "(418, 11)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c85dc07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a5a34588",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.1+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9b396cf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['Cabin'],inplace=True)\n",
    "test.drop(columns=['Cabin'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "69373f78",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Embarked'].fillna('S',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "47587554",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Fare'].fillna(test['Fare'].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "87665b16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ff820558",
   "metadata": {},
   "outputs": [],
   "source": [
    "gen_age=np.random.randint(train['Age'].mean()-train['Age'].std(),train['Age'].mean()+train['Age'].std(), size=177)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "060ffffe",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\283863123.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train['Age'][np.isnan(train['Age'])]=gen_age\n"
     ]
    }
   ],
   "source": [
    "train['Age'][np.isnan(train['Age'])]=gen_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6dd9d75c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fe11e80c",
   "metadata": {},
   "outputs": [],
   "source": [
    "gen_age1=np.random.randint(test['Age'].mean()-test['Age'].std(),test['Age'].mean()+test['Age'].std(), size=86)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d8d1b083",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\2126762493.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  test['Age'][np.isnan(test['Age'])]=gen_age1\n"
     ]
    }
   ],
   "source": [
    "test['Age'][np.isnan(test['Age'])]=gen_age1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2cbaf521",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "800d1235",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Pclass          \n",
       "1       0.629630\n",
       "2       0.472826\n",
       "3       0.242363"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[['Pclass','Survived']].groupby('Pclass').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0d9a595a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>female</th>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>male</th>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "Sex             \n",
       "female  0.742038\n",
       "male    0.188908"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[['Sex','Survived']].groupby('Sex').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e93450aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.553571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q</th>\n",
       "      <td>0.389610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S</th>\n",
       "      <td>0.339009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived\n",
       "Embarked          \n",
       "C         0.553571\n",
       "Q         0.389610\n",
       "S         0.339009"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[['Embarked','Survived']].groupby('Embarked').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "78d6a09a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\1463015962.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train['Age'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Age', ylabel='Density'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkkAAAGwCAYAAAC99fF4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdTklEQVR4nO3deXxU1d0/8M+dPetkg2xkBYEAQSCBQDCiFYOArShWxCpoqz9T2yKkPFXAVh+XxoXyUCpLRUCpSrGCSmsqRAQECVtIACFAICEbGcJkmyxkJjNzf3+EjIQMkGWSO5N83q/XvCp3zsz9zi1kPjnn3HMEURRFEBEREVErMqkLICIiInJGDElEREREdjAkEREREdnBkERERERkB0MSERERkR0MSURERER2MCQRERER2aGQugBXZbVacfHiRXh5eUEQBKnLISIionYQRRG1tbUICQmBTHbzviKGpE66ePEiwsLCpC6DiIiIOqG4uBgDBgy4aRuGpE7y8vIC0HyRvb29Ja6GiIiI2sNgMCAsLMz2PX4zDEmd1DLE5u3tzZBERETkYtozVYYTt4mIiIjsYEgiIiIisoMhiYiIiMgOhiQiIiIiOxiSiIiIiOxgSCIiIiKygyGJiIiIyA6GJCIiIiI7GJKIiIiI7GBIIiIiIrKDIYmIiIjIDoYkIiIiIjsYkoiIiIjsYEgiIiIisoMhiYiIiMgOhdQFEBHwycGiLr3+sYRwB1VCREQt2JNEREREZAdDEhEREZEdDElEREREdjAkEREREdnBkERERERkB0MSERERkR0MSURERER2MCQRERER2cGQRERERGQHQxIRERGRHQxJRERERHYwJBERERHZwZBEREREZAdDEhEREZEdDElEREREdjAkEREREdnBkERERERkB0MSERERkR0MSURERER2MCQRERER2SF5SFq1ahWioqKg0WgQFxeHvXv33rT9nj17EBcXB41Gg+joaKxZs6bV81u3bkV8fDx8fHzg4eGBUaNG4R//+EerNq+88goEQWj1CAoKcvhnIyIiItclaUjavHkz5s+fjyVLliA7OxtJSUmYOnUqioqK7LYvKCjAtGnTkJSUhOzsbCxevBjz5s3Dli1bbG38/PywZMkSZGZm4vjx43jqqafw1FNPYfv27a3ea/jw4SgrK7M9Tpw40a2flYiIiFyLIIqiKNXJExIS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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "47c6cdc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(train['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "21fe88fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    1\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Age']>75]['Survived'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5acb2ce1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\3289552761.py:2: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train[train['Survived']==0]['Age'])\n",
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\3289552761.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train[train['Survived']==1]['Age'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Age', ylabel='Density'>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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IiIiIiIiIiJDRGGciIiIiIiIiIjIEFEYJyIiIiIiIiIiMkQUxomIiIiIiIiIiAwRhXEiIiIiIiIiIiJDRGGciIiIiIiIiIjIEFEYJyIiIiKDWrduHXa7nUsvvTTXVRERERE5bRimaZq5roSIiIiInHy+/vWvEwgE+M///E+2bdtGbW1trqskIiIicspTzzgRERERGSASifBf//Vf/Mu//AuXX345P//5z/udX7lyJePGjcPr9fLRj36UX/ziFxiGQWdnZ/aadevWccEFF+D1eqmpqeGWW24hEokM7RsREREROckojBMRERGRAVasWMH48eMZP348X/rSl3jiiSc4PKDi7bff5rOf/SwLFixg06ZNXH/99dx11139nr9lyxYuueQSPvOZz7B582ZWrFjB2rVrufnmm3PxdkREREROGhqmKiIiIiIDzJkzh6uuuopbb72VVCpFZWUlTz75JBdddBF33HEHf/rTn9iyZUv2+rvvvpslS5bQ0dFBQUEB1157LV6vl5/85CfZa9auXcu8efOIRCJ4PJ5cvC0RERGRnFPPOBERERHpZ8eOHWzYsIGrr74aAIfDwcKFC/nZz36WPT9z5sx+zzn33HP7HW/cuJGf//znBAKB7HbJJZeQyWTYu3fv0LwRERERkZOQI9cVEBEREZGTy+OPP04qlaK6ujpbZpomTqeTjo4OTNPEMIx+z3nnYItMJsP111/PLbfcMuD+WghCREREhjOFcSIiIiKSlUql+OUvf8kPf/hD5s+f3+/clVdeyW9+8xsmTJjAqlWr+p177bXX+h1PmzaNrVu3Mnbs2BNeZxEREZFTieaMExEREZGsP/zhDyxcuJDm5mby8/P7nbvrrrtYtWoVTz31FOPHj+e2227ja1/7Gps2beKb3/wmBw4coLOzk/z8fDZv3sxHPvIRvvrVr3Ldddfh9/vZvn07q1ev5pFHHsnRuxMRERHJPc0ZJyIiIiJZjz/+OBdddNGAIA6snnGbNm2io6OD3//+9zz11FNMmTKFZcuWZVdTdbvdAEyZMoU1a9awa9cu5s6dy9SpU7nnnnuorKwc0vcjIiIicrJRzzgRERER+cCWLFnCY489xv79+3NdFREREZGTmuaMExEREZH3benSpcycOZPi4mJefvllHnzwQW6++eZcV0tERETkpKcwTkRERETet127dvH973+f9vZ2amtr+eY3v8mdd96Z62qJiIiInPQ0TFVERERERERERGSIaAEHERERERERERGRIaIwTkREREREREREZIgojBMRERERERERERkiCuNERERERERERESGiMI4ERERERERERGRIaIwTkREREREREREZIgojBMRERERERERERkiCuNERERERERERESGiMI4ERERERERERGRIfL/AdDO5eL0WQZZAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1500x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize=(15,4))\n",
    "sns.distplot(train[train['Survived']==0]['Age'])\n",
    "sns.distplot(train[train['Survived']==1]['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b6d75785",
   "metadata": {},
   "outputs": [],
   "source": [
    "passengerId=test['PassengerId'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d9e6c6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['PassengerId','Ticket'],inplace=True)\n",
    "test.drop(columns=['PassengerId','Ticket'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a4405a74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived    0\n",
       "Pclass      0\n",
       "Name        0\n",
       "Sex         0\n",
       "Age         0\n",
       "SibSp       0\n",
       "Parch       0\n",
       "Fare        0\n",
       "Embarked    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "900fea5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\891094164.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train['Fare'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Fare', ylabel='Density'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Fare'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d92b747e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(train['Fare'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "87ba56ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    3\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Fare']>400]['Survived'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "097e74bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\250516256.py:2: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train[train['Survived']==0]['Fare'])\n",
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\250516256.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(train[train['Survived']==1]['Fare'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Fare', ylabel='Density'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize=(15,5))\n",
    "sns.distplot(train[train['Survived']==0]['Fare'])\n",
    "sns.distplot(train[train['Survived']==1]['Fare'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "56dafe93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                                Braund, Mr. Owen Harris\n",
       "1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n",
       "2                                 Heikkinen, Miss. Laina\n",
       "3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
       "4                               Allen, Mr. William Henry\n",
       "                             ...                        \n",
       "886                                Montvila, Rev. Juozas\n",
       "887                         Graham, Miss. Margaret Edith\n",
       "888             Johnston, Miss. Catherine Helen \"Carrie\"\n",
       "889                                Behr, Mr. Karl Howell\n",
       "890                                  Dooley, Mr. Patrick\n",
       "Name: Name, Length: 891, dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Don't delete this unless its 1st Jan\n",
    "train['Name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "799e4f20",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['Name'],inplace=True)\n",
    "test.drop(columns=['Name'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "21b6d245",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['family']=train['SibSp'] + train['Parch'] + 1\n",
    "test['family']=test['SibSp'] + test['Parch'] + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9ce3dcac",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['SibSp','Parch'],inplace=True)\n",
    "test.drop(columns=['SibSp','Parch'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ac924ae3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     537\n",
       "2     161\n",
       "3     102\n",
       "4      29\n",
       "6      22\n",
       "5      15\n",
       "7      12\n",
       "11      7\n",
       "8       6\n",
       "Name: family, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['family'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "560fac85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>family</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.303538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.552795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.578431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.724138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.136364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Survived\n",
       "family          \n",
       "1       0.303538\n",
       "2       0.552795\n",
       "3       0.578431\n",
       "4       0.724138\n",
       "5       0.200000\n",
       "6       0.136364\n",
       "7       0.333333\n",
       "8       0.000000\n",
       "11      0.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[['family','Survived']].groupby('family').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c7e27dfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def family_size(number):\n",
    "    if number==1:\n",
    "        return \"Alone\"\n",
    "    elif number>1 and number <5:\n",
    "        return \"Small\"\n",
    "    else:\n",
    "        return \"Large\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a5db6815",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Large'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "family_size(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3a9aa7c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['family_size']=train['family'].apply(family_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7f53f2e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['family_size']=test['family'].apply(family_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "108872b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['family'],inplace=True)\n",
    "test.drop(columns=['family'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "74ddef2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n",
       "       1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n",
       "       1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n",
       "       1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n",
       "       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n",
       "       1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n",
       "       0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n",
       "       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n",
       "       0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0,\n",
       "       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0,\n",
       "       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n",
       "       1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n",
       "       0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,\n",
       "       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
       "       1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n",
       "       0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n",
       "       0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0,\n",
       "       1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,\n",
       "       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], dtype=int64)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=train['Survived'].values\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "56dcf66a",
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(columns=['Survived'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "58cd5023",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 6)\n",
      "(418, 6)\n"
     ]
    }
   ],
   "source": [
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "dd4429cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\india\\AppData\\Local\\Temp\\ipykernel_3032\\2182374563.py:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  final=train.append(test)\n"
     ]
    }
   ],
   "source": [
    "final=train.append(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "29581e90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1309, 6)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f6ee2e50",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "final=pd.get_dummies(final, columns=['Pclass','Sex','Embarked','family_size'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "71c5954b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Xf=final.tail(418).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "bdf9e066",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=final.head(891).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2ef604c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 9)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "4539bc01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891,)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "43e3983e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "43c4abc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "clf=DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "25de5b37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "882c577b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "cadfb545",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(179,)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "4b5437c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7932960893854749"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b0e5538e",
   "metadata": {},
   "outputs": [],
   "source": [
    "yf=clf.predict(Xf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "741814b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418,)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "0e5b6564",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "7c835e70",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission['PassengerId']=passengerId\n",
    "submission['Survived']=yf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f1c26fd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdcda704",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c313840c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}